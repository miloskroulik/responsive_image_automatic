<?php

/**
 * @file
 * Automatically make use of responsive images.
 */

use Drupal\responsive_image_automatic\Entity\ImageStyle;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_entity_type_build().
 */
function responsive_image_automatic_entity_type_build(&$entity_info) {
  // Replace the entity class for the Image Style entity type so that we can
  // control how images are generated and insert our own variants automatically.
  $entity_info['image_style']->setClass('Drupal\responsive_image_automatic\Entity\ImageStyle');
}

/**
 * Implements hook_theme_registry_alter().
 */
function responsive_image_automatic_theme_registry_alter(&$theme_registry) {
  // Don't use the core responsive image template because it relies on having
  // a responsive image entity.
  $module_path = drupal_get_path('module', 'responsive_image_automatic');
  $theme_registry['image_style']['path'] = $module_path . '/templates';
}

/**
 * Implements hook_preprocess_image_style().
 */
function responsive_image_automatic_preprocess_image_style(&$vars) {

  // The fallback image element.
  $vars['img_element'] = [
    '#theme' => 'image',
    '#srcset' => [
      [
        'uri' => $vars['image']['#uri'],
      ],
    ],
  ];

  $style = ImageStyle::load($vars['style_name']);
  $automatic_derivatives = $style->getAutomaticDerivativeUris($vars['image']['#uri']);
  ksort($automatic_derivatives);

  // Create sources for the picture element with each of the automatic
  // derivatives.
  foreach ($automatic_derivatives as $width => $automatic_derivative_uri) {
    $vars['sources'][] = new Attribute([
      'media' => '(max-width: ' . $width . 'px)',
      'srcset' => file_create_url($automatic_derivative_uri),
    ]);
  }

  // Ensure the polyfill is loaded for old browsers.
  $vars['#attached'] = [
    'library' => ['core/picturefill'],
  ];
}
